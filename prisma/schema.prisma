generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(cuid())
  username       String      @unique
  email          String?     @unique
  name           String?
  verifiedEmail  Boolean     @default(false)
  emailVerified  DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  image          String?
  accounts       Account[]
  Flag           Flag[]
  orgMemberships OrgMember[]
  sessions       Session[]
}

model OrgMember {
  id                    String             @id @default(cuid())
  organizationId        String
  userId                String
  isOrgAdmin            Boolean            @default(false)
  bio                   String?
  discourseUsername     String?
  discourseApiKey       String?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  organization          Organization       @relation(fields: [organizationId], references: [id])
  user                  User               @relation(fields: [userId], references: [id])
  collectionMemberships CollectionMember[]

  @@unique([organizationId, userId])
}

model CollectionMember {
  id            String         @id @default(cuid())
  collectionId  String
  orgMemberId   String
  isAdmin       Boolean        @default(false)
  isGuide       Boolean        @default(false)
  isApproved    Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  collection    Collection     @relation(fields: [collectionId], references: [id])
  orgMember     OrgMember      @relation(fields: [orgMemberId], references: [id])
  Allocations   Allocation[]
  Comments      Comment[]
  Contributions Contribution[]
  Buckets       Bucket[]

  @@unique([orgMemberId, collectionId])
}

model Organization {
  id            String           @id @default(cuid())
  slug          String           @unique
  name          String
  logo          String?
  customDomain  String?
  finishedTodos Boolean          @default(false)
  collections   Collection[]
  discourse     DiscourseConfig?
  orgMembers    OrgMember[]
}

model Collection {
  id                      String             @id @default(cuid())
  slug                    String
  organizationId          String
  title                   String
  archived                Boolean            @default(false)
  info                    String?
  about                   String?
  color                   String?
  registrationPolicy      RegistrationPolicy
  currency                String
  maxAmountToDreamPerUser Int?
  dreamCreationCloses     DateTime?
  grantingOpens           DateTime?
  grantingCloses          DateTime?
  allowStretchGoals       Boolean?
  dreamReviewIsOpen       Boolean?
  discourseCategoryId     Int?
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  organization            Organization       @relation(fields: [organizationId], references: [id])
  Allocations             Allocation[]
  Bucket                  Bucket[]
  CollectionMember        CollectionMember[]
  Contributions           Contribution[]
  fields                  Field[]
  guidelines              Guideline[]
  tags                    Tag[]

  @@unique([organizationId, slug])
}

model Tag {
  id           String     @id @default(cuid())
  value        String
  collectionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  bucketId     String?
  Bucket       Bucket?    @relation(fields: [bucketId], references: [id])
  collection   Collection @relation(fields: [collectionId], references: [id])

  @@unique([collectionId, value])
}

model Guideline {
  id           String     @id @default(cuid())
  title        String
  description  String
  position     Int
  collectionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  collection   Collection @relation(fields: [collectionId], references: [id])
  Flag         Flag[]
}

model Field {
  id           String       @id @default(cuid())
  name         String
  description  String
  type         FieldType
  limit        Int?
  isRequired   Boolean
  position     Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  collectionId String
  Collection   Collection   @relation(fields: [collectionId], references: [id])
  FieldValue   FieldValue[]
}

model Bucket {
  id               String             @id @default(cuid())
  collectionId     String
  title            String
  description      String?
  summary          String?
  approvedAt       DateTime?
  publishedAt      DateTime?
  fundedAt         DateTime?
  canceledAt       DateTime?
  completedAt      DateTime?
  discourseTopicId Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  collection       Collection         @relation(fields: [collectionId], references: [id])
  BudgetItems      BudgetItem[]
  comments         Comment[]
  Contributions    Contribution[]
  FieldValues      FieldValue[]
  Flags            Flag[]
  Images           Image[]
  Tags             Tag[]
  Cocreators       CollectionMember[]
}

model Image {
  id       String  @id @default(cuid())
  small    String?
  large    String?
  bucketId String?
  bucket   Bucket? @relation(fields: [bucketId], references: [id])
}

model BudgetItem {
  id          String         @id @default(cuid())
  description String
  min         Int
  max         Int?
  type        BudgetItemType
  bucketId    String?
  Bucket      Bucket?        @relation(fields: [bucketId], references: [id])
}

model FieldValue {
  id       String @id @default(cuid())
  fieldId  String
  value    Json
  bucketId String
  Bucket   Bucket @relation(fields: [bucketId], references: [id])
  field    Field  @relation(fields: [fieldId], references: [id])
}

model Comment {
  id                 String           @id @default(cuid())
  content            String
  isLog              Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  collectionMemberId String
  bucketId           String?
  Bucket             Bucket?          @relation(fields: [bucketId], references: [id])
  collectionMember   CollectionMember @relation(fields: [collectionMemberId], references: [id])
}

model Flag {
  id              String    @id @default(cuid())
  guidelineId     String
  userId          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  type            FlagType
  resolvingFlagId String?   @unique(map: "Flag_resolvingFlagId_unique")
  bucketId        String?
  Bucket          Bucket?   @relation(fields: [bucketId], references: [id])
  guideline       Guideline @relation(fields: [guidelineId], references: [id])
  resolvingFlag   Flag?     @relation("FlagToFlag", fields: [resolvingFlagId], references: [id])
  user            User      @relation(fields: [userId], references: [id])
  resolvedBy      Flag?     @relation("FlagToFlag")
}

model Allocation {
  id                 String           @id @default(cuid())
  collectionId       String
  collectionMemberId String
  amount             Int
  createdAt          DateTime         @default(now())
  collection         Collection       @relation(fields: [collectionId], references: [id])
  collectionMember   CollectionMember @relation(fields: [collectionMemberId], references: [id])
}

model Contribution {
  id                 String           @id @default(cuid())
  collectionId       String
  collectionMemberId String
  bucketId           String
  amount             Int
  createdAt          DateTime         @default(now())
  bucket             Bucket           @relation(fields: [bucketId], references: [id])
  collection         Collection       @relation(fields: [collectionId], references: [id])
  collectionMember   CollectionMember @relation(fields: [collectionMemberId], references: [id])
}

model DiscourseConfig {
  id               String       @id @default(cuid())
  url              String
  apiKey           String
  dreamsCategoryId Int
  minPostLength    Int
  organizationId   String       @unique(map: "DiscourseConfig_organizationId_unique")
  organization     Organization @relation(fields: [organizationId], references: [id])
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

enum FieldType {
  TEXT
  MULTILINE_TEXT
  BOOLEAN
  ENUM
  FILE
}

enum RegistrationPolicy {
  OPEN
  REQUEST_TO_JOIN
  INVITE_ONLY
}

enum BudgetItemType {
  INCOME
  EXPENSE
}

enum FlagType {
  RAISE_FLAG
  RESOLVE_FLAG
  ALL_GOOD_FLAG
}
